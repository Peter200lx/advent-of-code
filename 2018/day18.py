from collections import namedtuple

import numpy as np

DATA = """
..|..|.|.|.||..#.#|...|..#.|.........|.......|..#.
#.|.........|||....#....|....##||.....|.|.........
..||......#.#||#.#.......#..#.#.###...|.#..#...#..
|....#....|.##.##.....##...##|..|....|..|#||...###
#|...|.#|..|......#.##....#|....|...|#......|.#|.|
..|....##.##.#..||##...#..##|......|...|#.||.#.#..
.#...#||...........#|.....|##....#.#...|#.|###..|.
||....#.#.|...||...###|.|#.....#.|#.|#...#.#.|...#
...#.....||.......#....#|###|####..|#|.###..||.#.#
|#|...||..##.||.||..#.#.|..#...#..|........#..|#..
#....||.|.....|.|.#|.##.|..|.#.....|..|.....#|.|..
|..||#........|#.|..|.|...#..#....#.|.....||#.#...
..|...||.|##||##..|...#|.....|#.|....#....||#.##..
#|..#|..||...|..|.|#|..##.#.......#|#....#||...#..
|#|.|...|..##...|.#||#..#...#....||.#.|...##..|..#
|..||.#.#..|....#...#.#..#..#...||.|.#.#.#.....#|.
.|##.####..||.#.|#.###....#...#.|..#.#.##.|..##..#
#|.......#......|.#..|.....||.|.#||#.#.##.#|....|.
.|..#.|#.##|....#......|.#||..|#..##.|..#......###
..###....#.||.#..|##.##..#|.#...|#|...#.|.|...#|#.
........||......|##||##..###|..|.##.#..#|##...|..#
.#....|....|...##.#.||##.....#|...|#.#||...#.....|
#...#|...###.|.|..|..#.|###.|.#.|.####|...|.#..|#.
...#..|.....|.#.##.|.#.#..|..##.##.#..|...#...|#..
..###.#|##|#.#.......|.|...||###|.#.........#..|..
..|#...||.#.#..|...|..#||...|.#.#......#...|..#...
.||..........|.#....|.||...|#.|.|||..||........|#.
#.##.#||..|.|#...|..#|.|#......|.||.......|...|#..
#.||.||#...#|||.....|.|.|.|...||.#..#.#.#|..|||.|.
.#...#...||||#...##.#.#......#|......#.|.....|#||.
.#|.###|#||.|#...#.|..|.|#.|#..#..#...|.|.|...|.|.
..#|.|#|..##|.||.|.....|#...#..|.|#....|.|..|..|#.
#....|..#.#.......#||..#....|.|..#.#|..#...|#.#.|.
#.#.|..|...#|.###||.#.....#|#|#.##..|.|#|....|....
....|#.#.||..|..#...|...|..|...|..#..#......#|.#..
..#..#|.|.|#.#.|.|.#.#.....#..|..#..|.......||#|#.
#|......|#..|.#...##|....|..|#||..|..||...||.#....
#..|#.......||.....|.||||#.|#.|....#|#....|#.#....
#.##.#.#..||......#...|......|#|...|.||.#.|..|....
####.|...||##|#|.......|||.#.#.....#...##.#|..#...
..|..|||..|.||#|#.|..#.|..#.|........###......#..|
..#|.....|||||#..||.....##..#...|||.....#......#.#
.#.|.||#.##.......||.#.||..#...|##..|.#.#...|...|.
.##........|..||.|.#|.|.||||..#...#..|..|#|#..|#|.
.#.#.....#|||..|...#.|...|...#.||..||###|.#|......
|.|#..#.#.|||||.#|.|......#.|#.||.....#..#...|#.|.
...|....#.###|.#.##......|#.##.....#.|.##.#......#
.#.#.....|..#.##..#|#|..#.#|##..##|..##.#..#....||
..#.#.|.....#.|..#.|.|#...|....#...|..|.|..#||...|
|.||.|...|...|##..||....|#.|..#..##....|#.#|##..|.""".strip()

EXAMPLE_DATA = """
.#.#...|#.
.....#|##|
.|..|...#.
..|#.....#
#.#|||#|#|
...#.||...
.|....|...
||...#|.#|
|.||||..|.
...#.|..|.""".strip()

OPEN = 0
WOOD = 1
YARD = 2

MAP_TYPE = {
    ".": OPEN,
    "|": WOOD,
    "#": YARD,
}

REV_MAP_TYPE = {
    OPEN: ".",
    WOOD: "|",
    YARD: "#",
}

np.set_printoptions(
    linewidth=500, threshold=np.nan, formatter={"int": lambda x: REV_MAP_TYPE[x]}
)

Coord = namedtuple("Coord", ["y", "x"])
Range = namedtuple("Range", ["y_max", "x_max"])


def parse_input(input_str):
    lines = input_str.split("\n")
    y_range = len(lines)
    x_range = len(lines[0])

    def from_input(y, x):
        return MAP_TYPE[lines[y][x]]
    from_input_vector = np.vectorize(from_input)
    return np.fromfunction(from_input_vector, (y_range, x_range), dtype=np.int16), Range(y_range, x_range)


def get_surrounding(array, a_range, loc):
    surrounding = []
    for y in range(max(loc.y - 1, 0), min(loc.y + 2, a_range.y_max)):
        for x in range(max(loc.x - 1, 0), min(loc.x + 2, a_range.y_max)):
            if (y, x) == loc:
                continue
            surrounding.append(array[y, x])
    return surrounding


def geo_tick(array, a_range):
    reference_array = array.copy()
    for y, x in np.ndindex(reference_array.shape):
        loc = Coord(y, x)
        loc_type = array[loc]
        surrounding = get_surrounding(reference_array, a_range, loc)
        if loc_type == OPEN:
            if len([s for s in surrounding if s == WOOD]) >= 3:
                array[loc] = WOOD
        elif loc_type == WOOD:
            if len([s for s in surrounding if s == YARD]) >= 3:
                array[loc] = YARD
        elif loc_type == YARD:
            if not (len([s for s in surrounding if s == WOOD]) >= 1
                    and len([s for s in surrounding if s == YARD]) >= 1):
                array[loc] = OPEN


def part_1(array, a_range, num_iters):
    for i in range(num_iters):
        geo_tick(array, a_range)
        if i > 1000:
            print(f"{i}\t{(array == WOOD).sum() * (array == YARD).sum()}")
    return (array == WOOD).sum() * (array == YARD).sum()


GEN_DATA = """1001	189601
1002	193318
1003	198801
1004	204000
1005	207000
1006	211145
1007	213664
1008	214286
1009	218680
1010	219035
1011	220426
1012	221676
1013	222308
1014	216920
1015	208692
1016	196707
1017	187186
1018	180565
1019	176344
1020	170880
1021	165540
1022	167008
1023	171444
1024	173328
1025	176808
1026	177410
1027	180752
1028	185658""".split("\n")
GEN_DATA = [[int(n) for n in l.split("\t")] for l in GEN_DATA]


def part_2(sequence, n):
    nums = [t[1] for t in sequence]
    return nums[(n - 1001 - 1) % len(nums)]


if __name__ == '__main__':
    lumber_field, field_range = parse_input(DATA)
    print(part_1(lumber_field.copy(), field_range, 10))
    # print(part_1(lumber_field.copy(), field_range, 1_000_000_000))
    # Ran the above code, found where output was wrapping, built GEN_DATA
    print(part_2(GEN_DATA, 1_000_000_000))

